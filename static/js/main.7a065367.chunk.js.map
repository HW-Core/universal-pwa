{"version":3,"sources":["serviceWorker.js","client/Routes/Home.jsx","client/Routes/Blog/List.jsx","client/Routes/Blog/Post.jsx","client/Routes/Admin.jsx","conf/conf.js","client/App/Router.jsx","client/App/App.jsx","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","content","fetch","res","text","setState","react_default","a","createElement","style","padding","react_markdown_default","source","React","Component","Blog","posts","response","json","className","length","slice","map","v","k","key","Link","to","id","title","Post","post","params","body","onTextChange","bind","assertThisInitialized","postClick","e","target","value","concat","toConsumableArray","marginBottom","marginTop","type","onChange","onClick","websiteUrl","sitemapBase","basePath","apiUrl","clientPort","prerender","enabled","port","host","cache_maxpages","cache_ttl","path","Router","BrowserRouter","basename","conf","children","Switch","Route","exact","component","Home","Admin","library","add","faHome","faRssSquare","faExternalLinkAlt","App","toggle","isOpen","prerenderReady","reactstrap_es","color","light","expand","href","aria-label","navbar","tag","index_es","icon","authLink","setContext","_","_ref","headers","token","localStorage","getItem","objectSpread","authorization","httpLink","createUploadLink","uri","client","ApolloClient","link","cache","InMemoryCache","jsx","react_apollo_browser_umd","client_App_App","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8IAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,0MC3F7D,SAAAC,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDT,MAAM,CACPiB,QAAS,gBAJEP,mNASAQ,MAAM,0FAAjBC,kBACgBA,EAAIC,cAApBH,SAEJJ,KAAKQ,SAAS,CACVJ,+IAKJ,OAAOK,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAQ,KACxBJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAeK,OAAQf,KAAKb,MAAMiB,kBArBjBY,IAAMC,WCoCpBC,cAhCb,SAAAA,IAAe,IAAArB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkB,IACbrB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoB,GAAAf,KAAAH,QACKb,MAAQ,CACXgC,MAAO,IAHItB,uMAJF,gDAgBUQ,MAhBV,sDAgBPe,cAEJpB,cACeoB,EAASC,gCAAtBF,iBADGX,6JAQL,OACEC,EAAAC,EAAAC,cAAA,OAAKW,UAAU,aACXb,EAAAC,EAAAC,cAAA,+FACAF,EAAAC,EAAAC,cAAA,WACEX,KAAKb,MAAMgC,MAAMI,QAAUvB,KAAKb,MAAMgC,MAAMK,MAAM,EAAG,IAAIC,IAAI,SAACC,EAAEC,GAAH,OAAOlB,EAAAC,EAAAC,cAAA,KAAGiB,IAAKD,GAAGlB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAI,SAASJ,EAAEK,GAAG,KAAML,EAAEM,WAAuB,qBA5B/HhB,IAAMC,WCkCVgB,cAhCX,SAAAA,EAAYrC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IACfpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMJ,KACDT,MAAQ,CACT+C,KAAM,IAHKrC,yMALT,iDAgBeQ,MAhBf,wCAgBgCL,KAAKJ,MAAMtB,MAAM6D,OAAOJ,kBAA1DX,kBACYA,EAASC,cAArBf,SAEJN,KAAKQ,SAAS,CACV0B,KAAM5B,EAAI8B,0IAOd,OACI3B,EAAAC,EAAAC,cAAA,OAAKW,UAAU,YAAYV,MAAO,CAACC,QAAQ,KACvCJ,EAAAC,EAAAC,cAAA,iGACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WAAMX,KAAKb,MAAM+C,cA5BdlB,IAAMC,iCCHrB,SAAAtB,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDT,MAAQ,CACToB,KAAM,GACNY,MAAO,IAGXtB,EAAKwC,aAAexC,EAAKwC,aAAaC,KAAlBxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KACpBA,EAAK2C,UAAY3C,EAAK2C,UAAUF,KAAfxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KARFA,4EAWN4C,GACTzC,KAAKQ,SAAS,CAAED,KAAMkC,EAAEC,OAAOC,4CAI/B3C,KAAKQ,SAAS,CACVD,KAAM,GACNY,MAAK,GAAAyB,OAAA9C,OAAA+C,EAAA,EAAA/C,CACEE,KAAKb,MAAMgC,OADb,CAEDnB,KAAKb,MAAMoB,0CAMnB,OAAOE,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAEC,QAAS,KAC1BJ,EAAAC,EAAAC,cAAA,yEACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACkC,aAAa,GAAGC,UAAU,KACnCtC,EAAAC,EAAAC,cAAA,SAAOgC,MAAO3C,KAAKb,MAAMoB,KAAMyC,KAAK,OAAOC,SAAUjD,KAAKqC,eAC1D5B,EAAAC,EAAAC,cAAA,UAAQuC,QAASlD,KAAKwC,WAAtB,SAEJ/B,EAAAC,EAAAC,cAAA,UACKX,KAAKb,MAAMgC,MAAMM,IAAI,SAACC,EAAGC,GAAJ,OAAUlB,EAAAC,EAAAC,cAAA,MAAIiB,IAAKD,GAAID,cAnChCV,IAAMC,WCepBxC,EAhBF,CACT0E,WAA8B,qBAAXhF,OAAyB,UAAYA,OAAOC,SAASC,SAAW,wBACnF+E,YAAa,2CACbC,SAAU,kBACVC,OAA0B,qBAAXnF,OAAyB,UAAYA,OAAOC,SAASC,SAAW,QAAU,wBACzFkF,WAAY,OACZC,UAAW,CACPC,SAAS,EACTC,KAAM,IACNC,KAAM,mBACNC,eAAgB,IAChBC,UAAW,MAEfC,KAAM,WCYKC,EAAA,SAACnE,GAAD,OACXa,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAQC,SAAUC,EAAKb,UACnB5C,EAAAC,EAAAC,cAAA,WACKf,EAAMuE,SAVf1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACI3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,OAAK,EAACR,KAAK,IAAIS,UAAWC,IACjC/D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOC,OAAK,EAACR,KAAK,SAASS,UAAWrD,IACtCT,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOP,KAAK,YAAYS,UAAWtC,KAS/BxB,EAAAC,EAAAC,cAACyD,EAAA,EAAD,KACI3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,CAAOP,KAAK,QAAQS,UAAWE,uCCX/CC,IAAQC,IAAIC,IAAQC,IAAaC,SAkDlBC,cA9Cb,SAAAA,EAAYnF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,IACjBlF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,KAAAH,KAAMJ,KAEDoF,OAASnF,EAAKmF,OAAO1C,KAAZxC,OAAAyC,EAAA,EAAAzC,QAAAyC,EAAA,EAAAzC,CAAAD,KACdA,EAAKV,MAAQ,CACX8F,QAAQ,GALOpF,wEASjBG,KAAKQ,SAAS,CACZyE,QAASjF,KAAKb,MAAM8F,qDAKtB9G,OAAO+G,gBAAiB,mCAIxB,OACEzE,EAAAC,EAAAC,cAACoD,EAAD,KACEtD,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAQC,MAAM,QAAQC,OAAK,EAACC,OAAO,MACjC7E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAaI,KAAMrB,EAAKb,UAAxB,oBACA5C,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAejC,QAASlD,KAAKgF,OAAQQ,aAAW,mBAChD/E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAUF,OAAQjF,KAAKb,MAAM8F,OAAQQ,QAAM,GACzChF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAKM,QAAM,GACThF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAASrD,GAAG,IAAI4D,IAAK7D,KAAMpB,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAiBC,KAAK,SAAjD,UAEFnF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAASrD,GAAG,SAAS4D,IAAK7D,KAAMpB,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAiBC,KAAK,eAAtD,UAEFnF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAASrD,GAAG,QAAQ4D,IAAK7D,KAAzB,UAEFpB,EAAAC,EAAAC,cAACwE,EAAA,EAAD,KACE1E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAASI,KAAK,4CAAd,cAAoE9E,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAiBC,KAAK,mCAtCxF5E,IAAMC,WCNlB4E,EAAWC,YAAW,SAACC,EAADC,GAAoB,IAAdC,EAAcD,EAAdC,QACxBC,EAAQC,aAAaC,QAAQ,cACnC,MAAO,CACHH,QAAQnG,OAAAuG,EAAA,EAAAvG,CAAA,GACDmG,EADA,CAEHK,cAAeJ,EAAK,UAAAtD,OAAasD,GAAU,QAKjDK,EAAWC,2BAAiB,CAC9BC,IAAKhI,EAAO6E,OAAS,IAAM7E,EAAOqF,OAGhC4C,EAAS,IAAIC,IAAa,CAC5BC,KAAMf,EAASjD,OAAO2D,GACtBM,MAAO,IAAIC,MAITC,EAAOtG,EAAAC,EAAAC,cAAA,WACTF,EAAAC,EAAAC,cAACqG,EAAA,eAAD,CAAgBN,OAAQA,GACpBjG,EAAAC,EAAAC,cAACsG,EAAD,QAKFC,EAAcC,SAASC,eAAe,QACxCF,EAAYG,gBACZC,IAASC,QAAQR,EAAKG,GAEtBI,IAASE,OAAOT,EAAKG,GRzBlB,SAAkBzI,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+I,IAAIC,iBAAwBvJ,OAAOC,SAASmH,MACpDoC,SAAWxJ,OAAOC,SAASuJ,OAIvC,OAGFxJ,OAAOyJ,iBAAiB,OAAQ,WAC9B,IAAMpJ,EAAK,GAAAoE,OAAM8E,iBAAN,sBAEPzJ,GAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,KAAK,SAAAuC,GAEJ,IAAMyG,EAAczG,EAAS6E,QAAQ6B,IAAI,gBAEnB,MAApB1G,EAAS2G,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CtJ,UAAUC,cAAcsJ,MAAMpJ,KAAK,SAAAC,GACjCA,EAAaoJ,aAAarJ,KAAK,WAC7BV,OAAOC,SAAS+J,aAKpB5J,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFA8I,CAAwB5J,EAAOC,GAI/BC,UAAUC,cAAcsJ,MAAMpJ,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MQG/BE","file":"static/js/main.7a065367.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state={\r\n            content: \"# Loading...\" \r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var res =await fetch(\"https://raw.githubusercontent.com/HW-Core/universal-pwa/master/README.md\")\r\n        var content = await res.text();\r\n\r\n        this.setState({\r\n            content\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div style={{padding:20}}>\r\n            <ReactMarkdown source={this.state.content} />\r\n        </div>\r\n    }\r\n}","import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ISSUES = '//jsonplaceholder.typicode.com/posts';\r\n\r\nclass Blog extends React.Component {\r\n\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      posts: []\r\n    }\r\n \r\n  }\r\n\r\n  async componentDidMount (){\r\n\r\n    const postsUrl = ISSUES;\r\n\r\n    var response = await fetch(postsUrl);\r\n\r\n    this.setState({\r\n      posts: await response.json()\r\n    })\r\n  }\r\n \r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n          <h3>This is just a demo of fetching posts with a pre-rendered list (if no JS enabled)</h3>\r\n          <br></br>\r\n          {(this.state.posts.length && this.state.posts.slice(0, 10).map((v,k)=><p key={k}><Link to={\"/blog/\"+v.id+\"/\"}>{v.title}</Link></p>)) || \"Loading...\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blog;","import React from \"react\"\r\n\r\nconst ISSUE = '//jsonplaceholder.typicode.com/posts/';\r\n\r\n\r\nclass Post extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const postsUrl = ISSUE;\r\n\r\n        var response = await fetch(postsUrl + this.props.match.params.id);\r\n        var res = await response.json();\r\n\r\n        this.setState({\r\n            post: res.body\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"container\" style={{padding:20}}>\r\n                <h3>This is just a demo of fetching post with a pre-rendered content (if no JS enabled)</h3>\r\n                <br></br>\r\n                <div>{this.state.post}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from \"react\"\r\nexport default class extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            text: \"\",\r\n            posts: []\r\n        }\r\n\r\n        this.onTextChange = this.onTextChange.bind(this);\r\n        this.postClick = this.postClick.bind(this);\r\n    }\r\n\r\n    onTextChange(e) {\r\n        this.setState({ text: e.target.value })\r\n    }\r\n\r\n    postClick() {\r\n        this.setState({\r\n            text: \"\",\r\n            posts: [\r\n                ...this.state.posts,\r\n                this.state.text\r\n            ]\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div style={{ padding: 20 }}>\r\n            <h3>This is a demo of admin page NOT indexed in sitemap for SEO</h3>\r\n            <br></br>\r\n            <div style={{marginBottom:20,marginTop:20}}>\r\n                <input value={this.state.text} type=\"text\" onChange={this.onTextChange}></input>\r\n                <button onClick={this.postClick}>POST</button>\r\n            </div>\r\n            <ul>\r\n                {this.state.posts.map((v, k) => <li key={k}>{v}</li>)}\r\n            </ul>\r\n        </div>\r\n    }\r\n}","var config = {\r\n    websiteUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname : 'http://127.0.0.1:3000',\r\n    sitemapBase: \"https://hw-core.github.io/universal-pwa/\",\r\n    basePath: \"/universal-pwa/\" ,\r\n    apiUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname + ':4000' : 'http://127.0.0.1:4000',\r\n    clientPort: '3000',\r\n    prerender: {\r\n        enabled: true,\r\n        port: 60000,\r\n        host: 'http://127.0.0.1',\r\n        cache_maxpages: 1000,\r\n        cache_ttl: 3600\r\n    },\r\n    path: 'graphql'\r\n}\r\n\r\nexport default config;","import React from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Home from \"@this/src/client/Routes/Home\"\r\nimport Blog from \"@this/src/client/Routes/Blog/List\"\r\nimport Post from \"@this/src/client/Routes/Blog/Post\"\r\nimport Admin from \"@this/src/client/Routes/Admin\"\r\n\r\nimport conf from \"@this/conf/conf\"\r\n\r\n/**\r\n * This function is used by our sitemap generator\r\n * DO NOT REMOVE this method, just change routes to your needs\r\n * if you want to exclude some routes from sitemap just\r\n * add them directly inside the <Router>\r\n */\r\nexport const routePaths = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/blog/\" component={Blog} />\r\n        <Route path=\"/blog/:id\" component={Post} />\r\n    </Switch>\r\n)\r\n\r\nexport default (props) => (\r\n    <Router basename={conf.basePath}>\r\n        <div>\r\n            {props.children}\r\n            {routePaths()}\r\n            <Switch>\r\n                <Route path=\"/app/\" component={Admin} />\r\n            </Switch>\r\n        </div>\r\n    </Router >\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Router from \"./Router\"\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faHome, faRssSquare, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport conf from \"@this/conf/conf\"\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nlibrary.add(faHome, faRssSquare, faExternalLinkAlt);\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.prerenderReady = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href={conf.basePath}>HW Universal PWA</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} aria-label=\"navbar-toggler\" />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                <NavLink to=\"/\" tag={Link}><FontAwesomeIcon icon=\"home\" /> Home</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/blog/\" tag={Link}><FontAwesomeIcon icon=\"rss-square\" /> Blog</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/app/\" tag={Link}>Admin</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/HW-Core/universal-pwa\">Repository <FontAwesomeIcon icon=\"external-link-alt\" /></NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </Router>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n\r\nimport App from \"@this/src/client/App/App.jsx\";\r\nimport config from \"@this/conf/conf.js\"\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"AUTH_TOKEN\")\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst httpLink = createUploadLink({\r\n    uri: config.apiUrl + \"/\" + config.path\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nconst jsx = (<div>\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n</div>\r\n);\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement.hasChildNodes()) {\r\n    ReactDOM.hydrate(jsx, rootElement);\r\n} else {\r\n    ReactDOM.render(jsx, rootElement);\r\n}\r\n\r\n\r\n// switch register to unregister to disable serviceWorker (offline available app)\r\n// serviceWorker.unregister();\r\nserviceWorker.register();"],"sourceRoot":""}
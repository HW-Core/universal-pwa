{"version":3,"sources":["serviceWorker.js","client/Routes/Home.jsx","client/Routes/Blog/List.jsx","client/Routes/Blog/Post.jsx","client/Routes/Admin.jsx","client/App/Router.jsx","client/App/App.jsx","conf/conf.js","index.jsx"],"names":["Boolean","window","location","hostname","match","Home","react_default","a","createElement","Blog","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","posts","_this2","fetch","then","response","json","setState","className","length","map","v","Link","to","id","slug","React","Component","Post","props","post","params","console","log","content","rendered","dangerouslySetInnerHTML","__html","Admin","type","Router","BrowserRouter","children","Switch","Route","exact","path","component","library","add","faHome","faRssSquare","App","toggle","bind","assertThisInitialized","isOpen","prerenderReady","reactstrap_es","color","light","expand","href","onClick","navbar","tag","index_es","icon","config","websiteUrl","apiUrl","clientPort","prerender","enabled","port","host","cache_maxpages","cache_ttl","authLink","setContext","_","_ref","headers","token","localStorage","getItem","objectSpread","authorization","concat","httpLink","createUploadLink","uri","client","ApolloClient","link","cache","InMemoryCache","jsx","react_apollo_browser_umd","client_App_App","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d440d3e9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nexport default () => <div>\r\n    Hello World\r\n</div>","import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst WP_POST = 'http://azerothshard.org/wp-json/wp/v2/posts/';\r\n\r\nclass Blog extends React.Component {\r\n\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      posts: []\r\n    }\r\n \r\n  }\r\n\r\n  componentDidMount (){\r\n\r\n    const postsUrl = WP_POST;\r\n\r\n    fetch(postsUrl)\r\n    .then(response => response.json())\r\n    .then(response => {\r\n      this.setState({\r\n        posts: response\r\n      })\r\n    })\r\n  }\r\n \r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n          {(this.state.posts.length && this.state.posts.map(v=><p><Link to={\"/blog/\"+v.id+\"/\"}>{v.slug}</Link></p>)) || \"Loading...\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blog;","import React from \"react\"\r\n\r\nconst WP_POST = 'http://azerothshard.org/wp-json/wp/v2/posts/';\r\n\r\n\r\nclass Post extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: \"\"\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const postsUrl = WP_POST;\r\n\r\n        fetch(postsUrl + this.props.match.params.id)\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                console.log(response)\r\n                this.setState({\r\n                    post: response.content.rendered\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div dangerouslySetInnerHTML={{ __html: this.state.post }}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from \"react\"\r\nexport default () => <div>\r\n    <input type=\"text\"></input>\r\n    <button>POST</button>\r\n</div>","import React from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Home from \"@this/src/client/Routes/Home\"\r\nimport Blog from \"@this/src/client/Routes/Blog/List\"\r\nimport Post from \"@this/src/client/Routes/Blog/Post\"\r\nimport Admin from \"@this/src/client/Routes/Admin\"\r\n\r\n/**\r\n * This function is used by our sitemap generator\r\n * DO NOT REMOVE this method, just change routes to your needs\r\n * if you want to exclude some routes from sitemap just\r\n * add them directly inside the <Router>\r\n */\r\nexport const routePaths = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/blog/\" component={Blog} />\r\n        <Route path=\"/blog/:id\" component={Post} />\r\n    </Switch>\r\n)\r\n\r\nexport default (props) => (\r\n    <Router>\r\n        <div>\r\n            {props.children}\r\n            {routePaths()}\r\n            <Switch>\r\n                <Route path=\"/app/\" component={Admin} />\r\n            </Switch>\r\n        </div>\r\n    </Router >\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Router from \"./Router\"\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faHome, faRssSquare } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nlibrary.add(faHome, faRssSquare);\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.prerenderReady = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"/\">HW Universal PWA</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                <NavLink to=\"/\" tag={Link}><FontAwesomeIcon icon=\"home\"/> Home</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/blog/\" tag={Link}><FontAwesomeIcon icon=\"rss-square\"/> Blog</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/app/\" tag={Link}>Admin</NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </Router>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;","var config = {\r\n    websiteUrl: \"https://hw-core.github.io/universal-pwa/\",\r\n    apiUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname + ':4000' : 'http://127.0.0.1:4000',\r\n    clientPort: '3000',\r\n    prerender: {\r\n        enabled: true,\r\n        port: 60000,\r\n        host: 'http://127.0.0.1',\r\n        cache_maxpages: 1000,\r\n        cache_ttl: 3600\r\n    },\r\n    path: 'graphql'\r\n}\r\n\r\nexport default config;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n\r\nimport App from \"@this/src/client/App/App.jsx\";\r\nimport config from \"@this/conf/conf.js\"\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"AUTH_TOKEN\")\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst httpLink = createUploadLink({\r\n    uri: config.apiUrl + \"/\" + config.path\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nconst jsx = (<div>\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n</div>\r\n);\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement.hasChildNodes()) {\r\n    ReactDOM.hydrate(jsx, rootElement);\r\n} else {\r\n    ReactDOM.render(jsx, rootElement);\r\n}\r\n\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
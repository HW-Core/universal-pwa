{"version":3,"sources":["serviceWorker.js","client/Routes/Home.jsx","client/Routes/Blog/List.jsx","client/Routes/Blog/Post.jsx","client/Routes/Admin.jsx","conf/conf.js","client/App/Router.jsx","client/App/App.jsx","index.jsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","_default","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","content","fetch","res","text","setState","react_default","a","createElement","react_markdown_default","source","React","Component","Blog","posts","response","json","className","length","slice","map","v","k","key","Link","to","id","title","Post","post","params","body","Admin","type","websiteUrl","sitemapBase","basePath","apiUrl","clientPort","prerender","enabled","port","host","cache_maxpages","cache_ttl","path","Router","BrowserRouter","basename","conf","children","Switch","Route","exact","component","Home","library","add","faHome","faRssSquare","faExternalLinkAlt","App","toggle","bind","assertThisInitialized","isOpen","prerenderReady","reactstrap_es","color","light","expand","href","onClick","aria-label","navbar","tag","index_es","icon","authLink","setContext","_","_ref","headers","token","localStorage","getItem","objectSpread","authorization","concat","httpLink","createUploadLink","uri","client","ApolloClient","link","cache","InMemoryCache","jsx","react_apollo_browser_umd","client_App_App","rootElement","document","getElementById","hasChildNodes","ReactDOM","hydrate","render","URL","process","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.935516d9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default class extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state={\r\n            content: \"# Loading...\" \r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        var res =await fetch(\"https://raw.githubusercontent.com/HW-Core/universal-pwa/master/README.md\")\r\n        var content = await res.text();\r\n\r\n        this.setState({\r\n            content\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <ReactMarkdown source={this.state.content} />\r\n        </div>\r\n    }\r\n}","import React from \"react\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst ISSUES = '//jsonplaceholder.typicode.com/posts';\r\n\r\nclass Blog extends React.Component {\r\n\r\n  constructor () {\r\n    super();\r\n    this.state = {\r\n      posts: []\r\n    }\r\n \r\n  }\r\n\r\n  async componentDidMount (){\r\n\r\n    const postsUrl = ISSUES;\r\n\r\n    var response = await fetch(postsUrl);\r\n\r\n    this.setState({\r\n      posts: await response.json()\r\n    })\r\n  }\r\n \r\n  render() {\r\n\r\n    \r\n    return (\r\n      <div className=\"container\">\r\n          {(this.state.posts.length && this.state.posts.slice(0, 10).map((v,k)=><p key={k}><Link to={\"/blog/\"+v.id+\"/\"}>{v.title}</Link></p>)) || \"Loading...\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blog;","import React from \"react\"\r\n\r\nconst ISSUE = '//jsonplaceholder.typicode.com/posts/';\r\n\r\n\r\nclass Post extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            post: \"\"\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n\r\n        const postsUrl = ISSUE;\r\n\r\n        var response = await fetch(postsUrl + this.props.match.params.id);\r\n        var res = await response.json();\r\n\r\n        this.setState({\r\n            post: res.body\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div>{this.state.post}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Post;","import React from \"react\"\r\nexport default () => <div>\r\n    <input type=\"text\"></input>\r\n    <button>POST</button>\r\n</div>","var config = {\r\n    websiteUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname : 'http://127.0.0.1:3000',\r\n    sitemapBase: \"https://hw-core.github.io/universal-pwa/\",\r\n    basePath: \"/universal-pwa/\" ,\r\n    apiUrl: typeof window !== \"undefined\" ? 'http://' + window.location.hostname + ':4000' : 'http://127.0.0.1:4000',\r\n    clientPort: '3000',\r\n    prerender: {\r\n        enabled: true,\r\n        port: 60000,\r\n        host: 'http://127.0.0.1',\r\n        cache_maxpages: 1000,\r\n        cache_ttl: 3600\r\n    },\r\n    path: 'graphql'\r\n}\r\n\r\nexport default config;","import React from 'react';\r\nimport { Switch, Route } from 'react-router';\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nimport Home from \"@this/src/client/Routes/Home\"\r\nimport Blog from \"@this/src/client/Routes/Blog/List\"\r\nimport Post from \"@this/src/client/Routes/Blog/Post\"\r\nimport Admin from \"@this/src/client/Routes/Admin\"\r\n\r\nimport conf from \"@this/conf/conf\"\r\n\r\n/**\r\n * This function is used by our sitemap generator\r\n * DO NOT REMOVE this method, just change routes to your needs\r\n * if you want to exclude some routes from sitemap just\r\n * add them directly inside the <Router>\r\n */\r\nexport const routePaths = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/blog/\" component={Blog} />\r\n        <Route path=\"/blog/:id\" component={Post} />\r\n    </Switch>\r\n)\r\n\r\nexport default (props) => (\r\n    <Router basename={conf.basePath}>\r\n        <div>\r\n            {props.children}\r\n            {routePaths()}\r\n            <Switch>\r\n                <Route path=\"/app/\" component={Admin} />\r\n            </Switch>\r\n        </div>\r\n    </Router >\r\n);","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Router from \"./Router\"\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faHome, faRssSquare, faExternalLinkAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink\r\n} from 'reactstrap';\r\n\r\nlibrary.add(faHome, faRssSquare, faExternalLinkAlt);\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.toggle = this.toggle.bind(this);\r\n    this.state = {\r\n      isOpen: false\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.prerenderReady = true;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n          <NavbarBrand href=\"https://github.com/HW-Core/universal-pwa\">HW Universal PWA</NavbarBrand>\r\n          <NavbarToggler onClick={this.toggle} aria-label=\"navbar-toggler\" />\r\n          <Collapse isOpen={this.state.isOpen} navbar>\r\n            <Nav navbar>\r\n              <NavItem>\r\n                <NavLink to=\"/\" tag={Link}><FontAwesomeIcon icon=\"home\" /> Home</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/blog/\" tag={Link}><FontAwesomeIcon icon=\"rss-square\" /> Blog</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink to=\"/app/\" tag={Link}>Admin</NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink href=\"https://github.com/HW-Core/universal-pwa\">Repository <FontAwesomeIcon icon=\"external-link-alt\" /></NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n          </Collapse>\r\n        </Navbar>\r\n      </Router>\r\n    )\r\n  }\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\n\r\nimport { ApolloProvider } from 'react-apollo'\r\nimport { ApolloClient } from 'apollo-client'\r\nimport { InMemoryCache } from 'apollo-cache-inmemory'\r\nimport { setContext } from 'apollo-link-context'\r\nimport { createUploadLink } from 'apollo-upload-client'\r\n\r\nimport App from \"@this/src/client/App/App.jsx\";\r\nimport config from \"@this/conf/conf.js\"\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n    const token = localStorage.getItem(\"AUTH_TOKEN\")\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst httpLink = createUploadLink({\r\n    uri: config.apiUrl + \"/\" + config.path\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n})\r\n\r\n\r\nconst jsx = (<div>\r\n    <ApolloProvider client={client}>\r\n        <App />\r\n    </ApolloProvider>\r\n</div>\r\n);\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement.hasChildNodes()) {\r\n    ReactDOM.hydrate(jsx, rootElement);\r\n} else {\r\n    ReactDOM.render(jsx, rootElement);\r\n}\r\n\r\n\r\n// switch register to unregister to disable serviceWorker (offline available app)\r\n// serviceWorker.unregister();\r\nserviceWorker.register();"],"sourceRoot":""}